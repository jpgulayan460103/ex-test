{"version":3,"sources":["logo.png","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Title","Typography","Option","Select","App","useEffect","getBeneficiaries","getStatistics","useState","beneficiaries","setBeneficiaries","searchOptions","setSearchOptions","loading","setLoading","statistics","setStatistics","barangays","setBarangays","keywords","setKeywords","axios","get","params","then","response","beneficiaryResponse","data","map","item","key","id","catch","error","console","log","index","getBarangays","dataSource","columns","title","render","text","record","category","CheckCircleTwoTone","style","fontSize","twoToneColor","CloseCircleTwoTone","highlightStyle","backgroundColor","padding","searchWords","autoEscape","textToHighlight","lastname","firstname","midname","ext","dataIndex","className","src","logo","alt","level","textAlign","name","layout","onFinish","Item","placeholder","allowClear","onChange","e","searchString","target","value","keyword","split","trim","queryString","width","mode","barangay","children","push","barangay_name","populateBarangaySelection","type","htmlType","pagination","position","statistic","toUpperCase","category_count","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1ce0f4f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.86d1eb32.png\";","import React, { useState, useEffect } from 'react';\n// import logo from './logo.svg';\nimport logo from './logo.png';\n// import './App.css';\nimport './styles.css';\nimport 'antd/dist/antd.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Table, Typography, Input, Form, Select } from 'antd';\nimport axios from 'axios';\nimport Highlighter from \"react-highlight-words\";\n\nimport { CloseCircleTwoTone, CheckCircleTwoTone } from '@ant-design/icons';\n\nconst { Title } = Typography;\nconst { Option } = Select;\n\nfunction App() {\n  useEffect(() => {\n    getBeneficiaries();\n    getStatistics();\n  }, []);\n  const [beneficiaries, setBeneficiaries] = useState([]);\n  const [searchOptions, setSearchOptions] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [statistics, setStatistics] = useState([]);\n  const [barangays, setBarangays] = useState([]);\n  const [keywords, setKeywords] = useState([]);\n\n  const queryString = (e) => {\n    let searchString = e.target.value;\n    setSearchOptions({\n      ...searchOptions,\n      keyword: searchString,\n    });\n    setKeywords(searchString.split(\",\").map(item => item.trim()));\n  }\n\n  const selectBarangay = (e) => {\n    let searchString = e;\n    setSearchOptions({\n      ...searchOptions,\n      barangay: searchString,\n    });\n  }\n\n  const getBeneficiaries = () => {\n    setLoading(true);\n    axios.get('http://localhost:3000/beneficiaries',{params: searchOptions})\n      .then(function (response) {\n        setLoading(false);\n        let beneficiaryResponse = response.data.data;\n        beneficiaryResponse.map(item => {\n          item.key = item.id;\n          return item;\n        })\n        setBeneficiaries(beneficiaryResponse);\n      })\n      .catch(function (error) {\n        setLoading(false);\n        console.log(error);\n      })\n      .then(function () {\n        setLoading(false);\n      });\n  }\n\n  const getStatistics = () => {\n    axios.get('http://localhost:3000/beneficiaries/statistics',{params: searchOptions})\n      .then(function (response) {\n        setLoading(false);\n        let beneficiaryResponse = response.data.data;\n        beneficiaryResponse.map((item, index) => {\n          item.key = `statistic_${index}`;\n          return item;\n        })\n        setStatistics(beneficiaryResponse);\n        getBarangays();\n      })\n      .catch(function (error) {\n        console.log(error);\n      })\n      .then(function () {\n      });\n  }\n\n  const getBarangays = () => {\n    axios.get('http://localhost:3000/beneficiaries/barangays',{params: searchOptions})\n      .then(function (response) {\n        setLoading(false);\n        let beneficiaryResponse = response.data.data;\n        beneficiaryResponse.map((item, index) => {\n          item.key = `barangay_${index}`;\n          return item;\n        })\n        setBarangays(beneficiaryResponse);\n      })\n      .catch(function (error) {\n        console.log(error);\n      })\n      .then(function () {\n      });\n  }\n  \n  const dataSource = beneficiaries;\n  \n  const columns = [\n    {\n      title: '',\n      key: 'status',\n      render: (text, record) => (\n        <span>\n          <span>\n            { (record.category == \"certified list\") ? (<CheckCircleTwoTone  style={{fontSize: 20}}  twoToneColor=\"#52c41a\"/>) : \"\" }\n            { (record.category != \"certified list\" && record.category != \"waitlisted\") ? (<CloseCircleTwoTone  style={{fontSize: 20}}  twoToneColor=\"#eb2f96\"/>) : \"\" }\n          </span>\n        </span>\n      ),\n    },\n    {\n      title: 'Name',\n      key: 'full_name_ln',\n      render: (text, record) => (\n        <span>\n          <Highlighter\n            highlightStyle={{ backgroundColor: '#ffe4bf', padding: 0 }}\n            searchWords={keywords}\n            autoEscape={true}\n            textToHighlight={`${record.lastname ? record.lastname : \"\"}, ${record.firstname ? record.firstname : \"\"} ${record.midname ? record.midname : \"\"} ${record.ext ? record.ext : \"\"}`}\n          />\n        </span>\n      ),\n    },\n    {\n      title: 'Birthday',\n      dataIndex: 'birthday',\n      key: 'birthday',\n    },\n    {\n      title: 'Barangay',\n      dataIndex: 'barangay_name',\n      key: 'barangay_name',\n    },\n    {\n      title: 'Source',\n      dataIndex: 'source',\n      key: 'source',\n    },\n    {\n      title: 'Category',\n      dataIndex: 'category',\n      key: 'category',\n    },\n    {\n      title: 'Remarks',\n      dataIndex: 'remarks',\n      key: 'remarks',\n    },\n  ];\n\n\n  const populateStatistics = () => {\n    return (\n      <div>\n        {statistics.map(statistic => {\n          return (\n            <p key={statistic.key}>\n              <b>{statistic.category.toUpperCase()}:</b> <span>{statistic.category_count}</span>\n            </p>\n          );\n        })}\n      </div>\n    );\n  }\n\n  const populateBarangaySelection = () => {\n    let children = [];\n    barangays.map(item => {\n      children.push(<Option key={item.key} value={item.barangay_name}>{item.barangay_name}</Option>);\n    });\n    return children;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"main-layout-container\">\n        <div className=\"container\"> \n          <div className=\"row justify-content-center align-items-center p-3\">\n            <img className=\"h-16\" src={logo} alt=\"\"/>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              <Title level={2} style={{textAlign: \"center\"}}>Social Amelioration Information System</Title>\n              <br />\n              <Form name=\"normal_login\" className=\"login-form\" layout=\"inline\" onFinish={getBeneficiaries} >\n                <Form.Item name=\"username\">\n                  <Input placeholder=\"Search\" allowClear onChange={(e) => {queryString(e)}} style={{width: \"250px\"}}  />\n                </Form.Item>\n                <Form.Item name=\"barangay\">\n                  <Select\n                    allowClear\n                    mode=\"multiple\"\n                    style={{ width: '250px' }}\n                    placeholder=\"Please select Barangay\"\n                    onChange={selectBarangay}\n                  >\n                    { populateBarangaySelection() }\n                  </Select>\n                </Form.Item>\n                <Form.Item>\n                  <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                    Search\n                  </Button>\n                </Form.Item>\n              </Form>\n              <br />\n              <Table dataSource={dataSource} columns={columns} loading={loading} pagination={{ position: ['topLeft', 'bottomLeft'] }} />\n              <Title level={3}>Total Records:</Title>\n              { populateStatistics() }\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}