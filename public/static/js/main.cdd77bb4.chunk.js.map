{"version":3,"sources":["logo.png","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Title","Typography","Text","Option","Select","App","useEffect","getBeneficiaries","getSourceStatistics","getBarangays","useState","beneficiaries","setBeneficiaries","searchOptions","setSearchOptions","loading","setLoading","setSourceStatistics","statistics","setStatistics","statisticsTotal","setStatisticsTotal","barangays","setBarangays","keywords","setKeywords","axios","get","params","then","response","APIResponse","data","map","item","key","id","catch","error","console","log","sourceResponse","index","title","source","source_count","getCategoryStatistics","category","category_count","children","filter","length","total","reduce","accumulator","currentValue","parseInt","dataSource","columns","render","text","record","SmileTwoTone","style","fontSize","twoToneColor","ExclamationCircleTwoTone","CloseCircleTwoTone","CheckCircleTwoTone","iconStatus","highlightStyle","backgroundColor","padding","searchWords","autoEscape","textToHighlight","lastname","firstname","midname","ext","dataIndex","className","src","logo","alt","level","textAlign","name","layout","onFinish","Item","autoComplete","placeholder","allowClear","onChange","e","searchString","target","value","keyword","split","trim","queryString","width","mode","barangay","optionLabelProp","push","barangay_name","label","city_name","populateBarangaySelection","searchType","defaultValue","type","htmlType","strong","pagination","position","expandable","expandedRowRender","margin","remarks","full_name_fn","address","province_name","payment_category","payout_branch","payout_partner","cash_out_ref_number","schedule","batch_part","starpay_status","showLine","switcherIcon","DownOutlined","defaultExpandAll","onSelect","selectedKeys","info","treeData","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.cdd77bb4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.86d1eb32.png\";","import React, { useState, useEffect } from 'react';\r\n// import logo from './logo.svg';\r\nimport logo from './logo.png';\r\n// import './App.css';\r\nimport './styles.css';\r\nimport 'antd/dist/antd.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button, Table, Typography, Input, Form, Select, Space, Tree   } from 'antd';\r\nimport axios from 'axios';\r\nimport Highlighter from \"react-highlight-words\";\r\n\r\nimport { CloseCircleTwoTone, CheckCircleTwoTone, ExclamationCircleTwoTone, SmileTwoTone, DownOutlined  } from '@ant-design/icons';\r\n\r\nconst { Title, Text } = Typography;\r\nconst { Option } = Select;\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    getBeneficiaries();\r\n    getSourceStatistics();\r\n    // getProvinces();\r\n    getBarangays();\r\n  }, []);\r\n  const baseUrl = \"\";\r\n  const [beneficiaries, setBeneficiaries] = useState([]);\r\n  const [searchOptions, setSearchOptions] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [categoryStatistics, setCategoryStatistics] = useState([]);\r\n  const [sourceStatistics, setSourceStatistics] = useState([]);\r\n  const [statistics, setStatistics] = useState([]);\r\n  const [statisticsTotal, setStatisticsTotal] = useState(0);\r\n  const [barangays, setBarangays] = useState([]);\r\n  const [provinces, setProvinces] = useState([]);\r\n  const [cities, setCities] = useState([]);\r\n  const [keywords, setKeywords] = useState([]);\r\n\r\n  const queryString = (e) => {\r\n    let searchString = e.target.value;\r\n    setSearchOptions({\r\n      ...searchOptions,\r\n      keyword: searchString,\r\n    });\r\n    setKeywords(searchString.split(\",\").map(item => item.trim()));\r\n  }\r\n\r\n  const selectBarangay = (e) => {\r\n    let searchString = e;\r\n    setSearchOptions({\r\n      ...searchOptions,\r\n      barangay: searchString,\r\n    });\r\n  }\r\n\r\n  const selectSearchType = (e) => {\r\n    let searchString = e;\r\n    setSearchOptions({\r\n      ...searchOptions,\r\n      searchType: searchString,\r\n    });\r\n  }\r\n\r\n  const onSelect = (selectedKeys, info) => {\r\n    console.log('selected', selectedKeys, info);\r\n  }\r\n\r\n  const getBeneficiaries = () => {\r\n    setLoading(true);\r\n    axios.get(`${baseUrl}/beneficiaries`,{params: searchOptions})\r\n      .then(function (response) {\r\n        setLoading(false);\r\n        let APIResponse = response.data.data;\r\n        APIResponse.map(item => {\r\n          item.key = item.id;\r\n          return item;\r\n        })\r\n        setBeneficiaries(APIResponse);\r\n      })\r\n      .catch(function (error) {\r\n        setLoading(false);\r\n        console.log(error);\r\n      })\r\n      .then(function () {\r\n        setLoading(false);\r\n      });\r\n  }\r\n\r\n  const getSourceStatistics = () => {\r\n    axios.get(`${baseUrl}/beneficiaries/statistics/source`,{params: searchOptions})\r\n      .then(function (response) {\r\n        setLoading(false);\r\n        let sourceResponse = response.data.data;\r\n        sourceResponse.map((item, index) => {\r\n          item.key = `source_statistic_${index}`;\r\n          item.title = `${item.source}: ${item.source_count}`;\r\n          return item;\r\n        })\r\n        setSourceStatistics(sourceResponse);\r\n        getCategoryStatistics(sourceResponse);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      })\r\n      .then(function () {\r\n      });\r\n  }\r\n\r\n  const getCategoryStatistics = (sourceResponse) => {\r\n    axios.get(`${baseUrl}/beneficiaries/statistics/category`,{params: searchOptions})\r\n      .then(function (response) {\r\n        setLoading(false);\r\n        let APIResponse = response.data.data;\r\n        APIResponse.map((item, index) => {\r\n          item.key = `category_statistic_${index}`;\r\n          item.title = `${item.category}: ${item.category_count}`;\r\n          return item;\r\n        })\r\n        for (let index = 0; index < sourceResponse.length; index++) {\r\n          sourceResponse[index].children = APIResponse.filter(item => item.source == sourceResponse[index].source)\r\n        }\r\n        let total = sourceResponse.reduce((accumulator, currentValue) => {\r\n          return accumulator + parseInt(currentValue.source_count);\r\n        }, 0);\r\n        setStatisticsTotal(total);\r\n        setStatistics(sourceResponse)\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      })\r\n      .then(function () {\r\n      });\r\n  }\r\n\r\n  const getBarangays = () => {\r\n    axios.get(`${baseUrl}/beneficiaries/barangays`,{params: searchOptions})\r\n    .then(function (response) {\r\n      setLoading(false);\r\n      let APIResponse = response.data.data;\r\n      APIResponse.map((item, index) => {\r\n        item.key = `barangay_${index}`;\r\n        return item;\r\n      })\r\n      setBarangays(APIResponse);\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    })\r\n    .then(function () {\r\n    });\r\n  }\r\n\r\n  const getProvinces = () => {\r\n    axios.get(`${baseUrl}/beneficiaries/provinces`,{params: searchOptions})\r\n    .then(function (response) {\r\n      setLoading(false);\r\n      let APIResponse = response.data.data;\r\n      APIResponse.map((item, index) => {\r\n        item.key = `province_${index}`;\r\n        return item;\r\n      })\r\n      setProvinces(APIResponse);\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    })\r\n    .then(function () {\r\n    });\r\n  }\r\n    \r\n  const iconStatus = (record) => {\r\n    if(record.source == \"1st tranche\" && record.category == \"consolidated paid beneficiaries\"){\r\n      return <SmileTwoTone  style={{fontSize: 20}}  twoToneColor=\"#FFD700\"/>;\r\n    }\r\n    if(record.source == \"additional\" && (record.category == \"certified list without reference number\" || record.category == \"certified list with reference number\")){\r\n      return <ExclamationCircleTwoTone  style={{fontSize: 20}}  twoToneColor=\"#842feb\"/>;\r\n    }else if(record.source == \"additional\" && (record.category != \"certified list without reference number\" || record.category != \"certified list with reference number\")){\r\n      return <CloseCircleTwoTone  style={{fontSize: 20}}  twoToneColor=\"#eb2f96\"/>;\r\n    }\r\n    switch (record.category) {\r\n      case \"certified list without reference number\":\r\n      case \"certified list with reference number\":\r\n      case \"certified list\":\r\n        return <CheckCircleTwoTone  style={{fontSize: 20}}  twoToneColor=\"#52c41a\"/>;\r\n        break;\r\n      default:\r\n        return <CloseCircleTwoTone  style={{fontSize: 20}}  twoToneColor=\"#eb2f96\"/>;\r\n        break;\r\n    }\r\n  }\r\n  \r\n  const dataSource = beneficiaries;\r\n  \r\n  const columns = [\r\n    {\r\n      title: '',\r\n      key: 'status',\r\n      render: (text, record) => (\r\n        <span>\r\n          <span>\r\n            { iconStatus(record) }\r\n          </span>\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Name',\r\n      key: 'full_name_ln',\r\n      render: (text, record) => (\r\n        <span>\r\n          <Highlighter\r\n            highlightStyle={{ backgroundColor: '#ffe4bf', padding: 0 }}\r\n            searchWords={keywords}\r\n            autoEscape={true}\r\n            textToHighlight={`${record.lastname ? record.lastname : \"\"}, ${record.firstname ? record.firstname : \"\"} ${record.midname ? record.midname : \"\"} ${record.ext ? record.ext : \"\"}`}\r\n          />\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Birthday',\r\n      dataIndex: 'birthday',\r\n      key: 'birthday',\r\n    },\r\n    {\r\n      title: 'Address',\r\n      dataIndex: 'address',\r\n      key: 'address',\r\n    },\r\n    {\r\n      title: 'Source',\r\n      dataIndex: 'source',\r\n      key: 'source',\r\n    },\r\n    {\r\n      title: 'Category',\r\n      dataIndex: 'category',\r\n      key: 'category',\r\n    },\r\n    {\r\n      title: 'Remarks',\r\n      dataIndex: 'remarks',\r\n      key: 'remarks',\r\n    },\r\n  ];\r\n\r\n\r\n  const populateCategoryStatistics = () => {\r\n    return (\r\n      <div>\r\n        {sourceStatistics.map(statistic => {\r\n          return (\r\n            <p key={statistic.key}>\r\n              <b>{statistic.source.toUpperCase()}:</b> <span>{statistic.source_count}</span>\r\n            </p>\r\n          );\r\n        })}\r\n        {categoryStatistics.map(statistic => {\r\n          return (\r\n            <p key={statistic.key}>\r\n              <b>{statistic.category.toUpperCase()}:</b> <span>{statistic.category_count}</span>\r\n            </p>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const populateBarangaySelection = () => {\r\n    let children = [];\r\n    barangays.map(item => {\r\n    children.push(<Option key={item.key} value={item.barangay_name}  label={item.barangay_name}>{item.barangay_name}, {item.city_name}</Option>);\r\n    });\r\n    return children;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"main-layout-container\">\r\n        <div className=\"container\"> \r\n          <div className=\"row justify-content-center align-items-center p-3\">\r\n            <img className=\"h-16\" src={logo} alt=\"\"/>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n              <Title level={2} style={{textAlign: \"center\"}}>Social Amelioration Information System</Title>\r\n              <br />\r\n              <Form name=\"normal_login\" className=\"login-form\" layout=\"inline\" onFinish={getBeneficiaries} >\r\n                <Form.Item name=\"username\">\r\n                  <Input autoComplete=\"off\" placeholder=\"Search\" allowClear onChange={(e) => {queryString(e)}} style={{width: \"250px\"}}  />\r\n                </Form.Item>\r\n                <Form.Item name=\"barangay\">\r\n                  <Select\r\n                    allowClear\r\n                    mode=\"multiple\"\r\n                    style={{ width: '300px' }}\r\n                    placeholder=\"Please select Barangay\"\r\n                    onChange={selectBarangay}\r\n                    optionLabelProp=\"label\"\r\n                  >\r\n                    { populateBarangaySelection() }\r\n                  </Select>\r\n                </Form.Item>\r\n                <Form.Item name=\"searchType\">\r\n                  <Select\r\n                    allowClear\r\n                    style={{ width: '120px' }}\r\n                    placeholder=\"Please select Search Type\"\r\n                    onChange={selectSearchType}\r\n                    defaultValue=\"full_name_ln\"\r\n                  >\r\n                    <Option key=\"full_name_ln\" value=\"full_name_ln\">Full Name</Option>\r\n                    <Option key=\"cash_out_ref_number\" value=\"cash_out_ref_number\">Ref Number</Option>\r\n                  </Select>\r\n                </Form.Item>\r\n                <Form.Item>\r\n                  <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                    Search\r\n                  </Button>\r\n                </Form.Item>\r\n              </Form> \r\n              { (keywords.length != 0 ? (\r\n                <Space>\r\n                  <Text>keywords: </Text>\r\n                  {keywords.map(item => {\r\n                    return <Text>\"<Text strong>{item}</Text>\"</Text>\r\n                  })}\r\n                </Space>\r\n              ) : \"\") }\r\n              <br />\r\n              <Table\r\n                dataSource={dataSource}\r\n                columns={columns}\r\n                loading={loading}\r\n                pagination={{ position: ['topLeft', 'bottomLeft'] }}\r\n                expandable={{\r\n                  expandedRowRender: record => {\r\n                    return (<div>\r\n                      <p style={{ margin: 0 }}>Source: <b>{record.source}</b></p>\r\n                      <p style={{ margin: 0 }}>Category: <b>{record.category} {record.remarks}</b></p>\r\n                      <p style={{ margin: 0 }}>Name: <b>{record.full_name_fn}</b></p>\r\n                      <p style={{ margin: 0 }}>Address: <b>{record.address}, {record.province_name}</b></p>\r\n                      <p style={{ margin: 0 }}>Payment Category: <b>{record.payment_category}</b></p>\r\n                      <p style={{ margin: 0 }}>Payout Branch: <b>{record.payout_branch}</b></p>\r\n                      <p style={{ margin: 0 }}>Payout Partner: <b>{record.payout_partner}</b></p>\r\n                      <p style={{ margin: 0 }}>\r\n                        Cash Out Reference Number:\r\n                        <b>\r\n                          { record.cash_out_ref_number}\r\n                          {/* <Highlighter\r\n                            highlightStyle={{ backgroundColor: '#ffe4bf', padding: 0 }}\r\n                            searchWords={keywords}\r\n                            autoEscape={true}\r\n                            textToHighlight={`${record.cash_out_ref_number ? record.cash_out_ref_number : \"\"}`}\r\n                          /> */}\r\n                        </b>\r\n                      </p>\r\n                      <p style={{ margin: 0 }}>Payout Schedule: <b>{record.schedule}</b></p>\r\n                      <p style={{ margin: 0 }}>Batch and Part: <b>{record.batch_part}</b></p>\r\n                      <p style={{ margin: 0 }}>Starpay Disbursement Status: <b>{record.starpay_status}</b></p>\r\n                    </div>);\r\n                  },\r\n                }}\r\n                />\r\n              <Title level={3}>Total Records: {statisticsTotal}</Title>\r\n              {/* { populateCategoryStatistics() } */}\r\n\r\n              <Tree\r\n                showLine\r\n                switcherIcon={<DownOutlined />}\r\n                defaultExpandAll={true}\r\n                onSelect={onSelect}\r\n                treeData={statistics}\r\n            />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}