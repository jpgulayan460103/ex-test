{"version":3,"sources":["logo.png","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Title","Typography","Text","Option","Select","App","useEffect","getBeneficiaries","getStatistics","useState","beneficiaries","setBeneficiaries","searchOptions","setSearchOptions","loading","setLoading","statistics","setStatistics","barangays","setBarangays","keywords","setKeywords","axios","get","params","then","response","beneficiaryResponse","data","map","item","key","id","catch","error","console","log","index","getBarangays","dataSource","columns","title","render","text","record","source","category","ExclamationCircleTwoTone","style","fontSize","twoToneColor","CloseCircleTwoTone","CheckCircleTwoTone","iconStatus","highlightStyle","backgroundColor","padding","searchWords","autoEscape","textToHighlight","lastname","firstname","midname","ext","dataIndex","className","src","logo","alt","level","textAlign","name","layout","onFinish","Item","autoComplete","placeholder","allowClear","onChange","e","searchString","target","value","keyword","split","trim","queryString","width","mode","barangay","children","push","barangay_name","populateBarangaySelection","type","htmlType","length","strong","pagination","position","expandable","expandedRowRender","margin","remarks","full_name_fn","payment_category","payout_branch","payout_partner","cash_out_ref_number","schedule","statistic","toUpperCase","category_count","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f55a64cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.86d1eb32.png\";","import React, { useState, useEffect } from 'react';\r\n// import logo from './logo.svg';\r\nimport logo from './logo.png';\r\n// import './App.css';\r\nimport './styles.css';\r\nimport 'antd/dist/antd.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button, Table, Typography, Input, Form, Select, Space  } from 'antd';\r\nimport axios from 'axios';\r\nimport Highlighter from \"react-highlight-words\";\r\n\r\nimport { CloseCircleTwoTone, CheckCircleTwoTone, ExclamationCircleTwoTone } from '@ant-design/icons';\r\n\r\nconst { Title, Text } = Typography;\r\nconst { Option } = Select;\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    getBeneficiaries();\r\n    getStatistics();\r\n  }, []);\r\n  const [beneficiaries, setBeneficiaries] = useState([]);\r\n  const [searchOptions, setSearchOptions] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [statistics, setStatistics] = useState([]);\r\n  const [barangays, setBarangays] = useState([]);\r\n  const [keywords, setKeywords] = useState([]);\r\n\r\n  const queryString = (e) => {\r\n    let searchString = e.target.value;\r\n    setSearchOptions({\r\n      ...searchOptions,\r\n      keyword: searchString,\r\n    });\r\n    setKeywords(searchString.split(\",\").map(item => item.trim()));\r\n  }\r\n\r\n  const selectBarangay = (e) => {\r\n    let searchString = e;\r\n    setSearchOptions({\r\n      ...searchOptions,\r\n      barangay: searchString,\r\n    });\r\n  }\r\n\r\n  const getBeneficiaries = () => {\r\n    setLoading(true);\r\n    axios.get('/beneficiaries',{params: searchOptions})\r\n      .then(function (response) {\r\n        setLoading(false);\r\n        let beneficiaryResponse = response.data.data;\r\n        beneficiaryResponse.map(item => {\r\n          item.key = item.id;\r\n          return item;\r\n        })\r\n        setBeneficiaries(beneficiaryResponse);\r\n      })\r\n      .catch(function (error) {\r\n        setLoading(false);\r\n        console.log(error);\r\n      })\r\n      .then(function () {\r\n        setLoading(false);\r\n      });\r\n  }\r\n\r\n  const getStatistics = () => {\r\n    axios.get('/beneficiaries/statistics',{params: searchOptions})\r\n      .then(function (response) {\r\n        setLoading(false);\r\n        let beneficiaryResponse = response.data.data;\r\n        beneficiaryResponse.map((item, index) => {\r\n          item.key = `statistic_${index}`;\r\n          return item;\r\n        })\r\n        setStatistics(beneficiaryResponse);\r\n        getBarangays();\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      })\r\n      .then(function () {\r\n      });\r\n  }\r\n\r\n  const getBarangays = () => {\r\n    axios.get('/beneficiaries/barangays',{params: searchOptions})\r\n      .then(function (response) {\r\n        setLoading(false);\r\n        let beneficiaryResponse = response.data.data;\r\n        beneficiaryResponse.map((item, index) => {\r\n          item.key = `barangay_${index}`;\r\n          return item;\r\n        })\r\n        setBarangays(beneficiaryResponse);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      })\r\n      .then(function () {\r\n      });\r\n  }\r\n\r\n  const iconStatus = (record) => {\r\n    if(record.source == \"additional\" && record.category == \"certified list without reference number\"){\r\n      return <ExclamationCircleTwoTone  style={{fontSize: 20}}  twoToneColor=\"#842feb\"/>;\r\n    }else if(record.source == \"additional\" && record.category != \"certified list without reference number\"){\r\n      return <CloseCircleTwoTone  style={{fontSize: 20}}  twoToneColor=\"#eb2f96\"/>;\r\n    }\r\n    switch (record.category) {\r\n      case \"certified list without reference number\":\r\n      case \"certified list with reference number\":\r\n        return <CheckCircleTwoTone  style={{fontSize: 20}}  twoToneColor=\"#52c41a\"/>;\r\n        break;\r\n      default:\r\n        return <CloseCircleTwoTone  style={{fontSize: 20}}  twoToneColor=\"#eb2f96\"/>;\r\n        break;\r\n    }\r\n  }\r\n  \r\n  const dataSource = beneficiaries;\r\n  \r\n  const columns = [\r\n    {\r\n      title: '',\r\n      key: 'status',\r\n      render: (text, record) => (\r\n        <span>\r\n          <span>\r\n            { iconStatus(record) }\r\n          </span>\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Name',\r\n      key: 'full_name_ln',\r\n      render: (text, record) => (\r\n        <span>\r\n          <Highlighter\r\n            highlightStyle={{ backgroundColor: '#ffe4bf', padding: 0 }}\r\n            searchWords={keywords}\r\n            autoEscape={true}\r\n            textToHighlight={`${record.lastname ? record.lastname : \"\"}, ${record.firstname ? record.firstname : \"\"} ${record.midname ? record.midname : \"\"} ${record.ext ? record.ext : \"\"}`}\r\n          />\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Birthday',\r\n      dataIndex: 'birthday',\r\n      key: 'birthday',\r\n    },\r\n    {\r\n      title: 'Barangay',\r\n      dataIndex: 'barangay_name',\r\n      key: 'barangay_name',\r\n    },\r\n    {\r\n      title: 'Source',\r\n      dataIndex: 'source',\r\n      key: 'source',\r\n    },\r\n    {\r\n      title: 'Category',\r\n      dataIndex: 'category',\r\n      key: 'category',\r\n    },\r\n    {\r\n      title: 'Remarks',\r\n      dataIndex: 'remarks',\r\n      key: 'remarks',\r\n    },\r\n  ];\r\n\r\n\r\n  const populateStatistics = () => {\r\n    return (\r\n      <div>\r\n        {statistics.map(statistic => {\r\n          return (\r\n            <p key={statistic.key}>\r\n              <b>{statistic.category.toUpperCase()}:</b> <span>{statistic.category_count}</span>\r\n            </p>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const populateBarangaySelection = () => {\r\n    let children = [];\r\n    barangays.map(item => {\r\n      children.push(<Option key={item.key} value={item.barangay_name}>{item.barangay_name}</Option>);\r\n    });\r\n    return children;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"main-layout-container\">\r\n        <div className=\"container\"> \r\n          <div className=\"row justify-content-center align-items-center p-3\">\r\n            <img className=\"h-16\" src={logo} alt=\"\"/>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n              <Title level={2} style={{textAlign: \"center\"}}>Social Amelioration Information System</Title>\r\n              <br />\r\n              <Form name=\"normal_login\" className=\"login-form\" layout=\"inline\" onFinish={getBeneficiaries} >\r\n                <Form.Item name=\"username\">\r\n                  <Input autoComplete=\"off\" placeholder=\"Search\" allowClear onChange={(e) => {queryString(e)}} style={{width: \"250px\"}}  />\r\n                </Form.Item>\r\n                <Form.Item name=\"barangay\">\r\n                  <Select\r\n                    allowClear\r\n                    mode=\"multiple\"\r\n                    style={{ width: '250px' }}\r\n                    placeholder=\"Please select Barangay\"\r\n                    onChange={selectBarangay}\r\n                  >\r\n                    { populateBarangaySelection() }\r\n                  </Select>\r\n                </Form.Item>\r\n                <Form.Item>\r\n                  <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                    Search\r\n                  </Button>\r\n                </Form.Item>\r\n              </Form> \r\n              { (keywords.length != 0 ? (\r\n                <Space>\r\n                  <Text>keywords: </Text>\r\n                  {keywords.map(item => {\r\n                    return <Text>\"<Text strong>{item}</Text>\"</Text>\r\n                  })}\r\n                </Space>\r\n              ) : \"\") }\r\n              <br />\r\n              <Table\r\n                dataSource={dataSource}\r\n                columns={columns}\r\n                loading={loading}\r\n                pagination={{ position: ['topLeft', 'bottomLeft'] }}\r\n                expandable={{\r\n                  expandedRowRender: record => {\r\n                    return (<div>\r\n                      <p style={{ margin: 0 }}>Source: <b>{record.source}</b></p>\r\n                      <p style={{ margin: 0 }}>Category: <b>{record.category} {record.remarks}</b></p>\r\n                      <p style={{ margin: 0 }}>Name: <b>{record.full_name_fn}</b></p>\r\n                      <p style={{ margin: 0 }}>Payment Category: <b>{record.payment_category}</b></p>\r\n                      <p style={{ margin: 0 }}>Payout Branch: <b>{record.payout_branch}</b></p>\r\n                      <p style={{ margin: 0 }}>Payout Partner: <b>{record.payout_partner}</b></p>\r\n                      <p style={{ margin: 0 }}>Cash Out Reference Number: <b>{record.cash_out_ref_number}</b></p>\r\n                      <p style={{ margin: 0 }}>Payout Schedule: <b>{record.schedule}</b></p>\r\n                    </div>);\r\n                  },\r\n                }}\r\n                />\r\n              <Title level={3}>Total Records:</Title>\r\n              { populateStatistics() }\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}